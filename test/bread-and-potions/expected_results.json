{"message":null,"status":"pass","tests":[{"message":null,"name":"test Edible is a protocol","output":"","status":"pass","task_id":1,"test_code":"assert Edible.__protocol__(:functions) == [eat: 2]"},{"message":null,"name":"test Edible cannot eat a completely new item","output":"","status":"pass","task_id":1,"test_code":"assert_raise Protocol.UndefinedError, fn -> Edible.eat(%NewItem{}, %Character{}) end"},{"message":null,"name":"test LoafOfBread implements the Edible protocol","output":"","status":"pass","task_id":2,"test_code":"{:consolidated, modules} = Edible.__protocol__(:impls)\nassert LoafOfBread in modules"},{"message":null,"name":"test LoafOfBread eating it increases health","output":"","status":"pass","task_id":2,"test_code":"character = %Character{health: 50}\n{_byproduct, %Character{} = character} = Edible.eat(%LoafOfBread{}, character)\nassert character.health == 55"},{"message":null,"name":"test LoafOfBread eating it has no byproduct","output":"","status":"pass","task_id":2,"test_code":"character = %Character{}\n{byproduct, %Character{}} = Edible.eat(%LoafOfBread{}, character)\nassert byproduct == nil"},{"message":null,"name":"test ManaPotion implements the Edible protocol","output":"","status":"pass","task_id":3,"test_code":"{:consolidated, modules} = Edible.__protocol__(:impls)\nassert ManaPotion in modules"},{"message":null,"name":"test ManaPotion eating it increases mana","output":"","status":"pass","task_id":3,"test_code":"character = %Character{mana: 10}\n{_byproduct, %Character{} = character} = Edible.eat(%ManaPotion{strength: 6}, character)\nassert character.mana == 16"},{"message":null,"name":"test ManaPotion eating it produces an empty bottle","output":"","status":"pass","task_id":3,"test_code":"character = %Character{}\n{byproduct, %Character{}} = Edible.eat(%ManaPotion{}, character)\nassert byproduct == %EmptyBottle{}"},{"message":null,"name":"test Poison implements the Edible protocol","output":"","status":"pass","task_id":4,"test_code":"{:consolidated, modules} = Edible.__protocol__(:impls)\nassert Poison in modules"},{"message":null,"name":"test Poison eating it brings health down to 0","output":"","status":"pass","task_id":4,"test_code":"character = %Character{health: 120}\n{_byproduct, %Character{} = character} = Edible.eat(%Poison{}, character)\nassert character.health == 0"},{"message":null,"name":"test Poison eating it produces an empty bottle","output":"","status":"pass","task_id":4,"test_code":"character = %Character{}\n{byproduct, %Character{}} = Edible.eat(%Poison{}, character)\nassert byproduct == %EmptyBottle{}"},{"message":null,"name":"test eating many things one after another","output":"","status":"pass","task_id":4,"test_code":"items = [%LoafOfBread{}, %ManaPotion{strength: 10}, %ManaPotion{strength: 2}, %LoafOfBread{}]\ncharacter = %Character{health: 100, mana: 100}\n\ncharacter =\n  Enum.reduce(items, character, fn item, character ->\n    {_, character} = Edible.eat(item, character)\n    character\n  end)\n\nassert character.health == 110\nassert character.mana == 112"}],"version":3}
