{"message":null,"status":"fail","tests":[{"message":null,"name":"test start returns an alive pid","output":"","status":"pass","task_id":1,"test_code":"assert {:ok, pid} = CommunityGarden.start()\nassert Process.alive?(pid)"},{"message":"  1) test when started, the registry is empty (CommunityGardenTest)\n     \u001b[1m\u001b[30mtest/community_garden_test.exs:11\u001b[0m\n     \u001b[31mAssertion with == failed\u001b[0m\n     \u001b[36mcode:  \u001b[0massert [] == CommunityGarden.list_registrations(pid)\n     \u001b[36mleft:  \u001b[0m\u001b[31m[]\u001b[0m\n     \u001b[36mright: \u001b[0m\u001b[32mnil\u001b[0m\n     \u001b[36mstacktrace:\u001b[0m\n       test/community_garden_test.exs:14: (test)\n","name":"test when started, the registry is empty","output":"","status":"fail","task_id":2,"test_code":"assert {:ok, pid} = CommunityGarden.start()\nassert [] == CommunityGarden.list_registrations(pid)"},{"message":"  2) test can register a new plot (CommunityGardenTest)\n     \u001b[1m\u001b[30mtest/community_garden_test.exs:18\u001b[0m\n     \u001b[31mmatch (=) failed\u001b[0m\n     \u001b[36mcode:  \u001b[0massert %Plot{} = CommunityGarden.register(pid, \"Johnny Appleseed\")\n     \u001b[36mleft:  \u001b[0m\u001b[31m%Plot{\n  \n}\u001b[0m\n     \u001b[36mright: \u001b[0m\u001b[32mnil\u001b[0m\n     \u001b[36mstacktrace:\u001b[0m\n       test/community_garden_test.exs:21: (test)\n","name":"test can register a new plot","output":"","status":"fail","task_id":3,"test_code":"assert {:ok, pid} = CommunityGarden.start()\nassert %Plot{} = CommunityGarden.register(pid, \"Johnny Appleseed\")"},{"message":"  3) test maintains a registry of plots (CommunityGardenTest)\n     \u001b[1m\u001b[30mtest/community_garden_test.exs:25\u001b[0m\n     \u001b[31mmatch (=) failed\u001b[0m\n     \u001b[36mcode:  \u001b[0massert %Plot{} = plot = CommunityGarden.register(pid, \"Johnny Appleseed\")\n     \u001b[36mleft:  \u001b[0m\u001b[31m%Plot{\n  \n}\u001b[0m\n     \u001b[36mright: \u001b[0m\u001b[32mnil\u001b[0m\n     \u001b[36mstacktrace:\u001b[0m\n       test/community_garden_test.exs:28: (test)\n","name":"test maintains a registry of plots","output":"","status":"fail","task_id":3,"test_code":"assert {:ok, pid} = CommunityGarden.start()\nassert %Plot{} = plot = CommunityGarden.register(pid, \"Johnny Appleseed\")\nassert [plot] == CommunityGarden.list_registrations(pid)"},{"message":"  4) test can release a plot (CommunityGardenTest)\n     \u001b[1m\u001b[30mtest/community_garden_test.exs:33\u001b[0m\n     \u001b[31mmatch (=) failed\u001b[0m\n     \u001b[36mcode:  \u001b[0massert %Plot{} = plot = CommunityGarden.register(pid, \"Johnny Appleseed\")\n     \u001b[36mleft:  \u001b[0m\u001b[31m%Plot{\n  \n}\u001b[0m\n     \u001b[36mright: \u001b[0m\u001b[32mnil\u001b[0m\n     \u001b[36mstacktrace:\u001b[0m\n       test/community_garden_test.exs:36: (test)\n","name":"test can release a plot","output":"","status":"fail","task_id":4,"test_code":"assert {:ok, pid} = CommunityGarden.start()\nassert %Plot{} = plot = CommunityGarden.register(pid, \"Johnny Appleseed\")\nassert :ok = CommunityGarden.release(pid, plot.plot_id)\nassert [] == CommunityGarden.list_registrations(pid)"},{"message":"  5) test can get registration of a registered plot (CommunityGardenTest)\n     \u001b[1m\u001b[30mtest/community_garden_test.exs:42\u001b[0m\n     \u001b[31mmatch (=) failed\u001b[0m\n     \u001b[36mcode:  \u001b[0massert %Plot{} = plot = CommunityGarden.register(pid, \"Johnny Appleseed\")\n     \u001b[36mleft:  \u001b[0m\u001b[31m%Plot{\n  \n}\u001b[0m\n     \u001b[36mright: \u001b[0m\u001b[32mnil\u001b[0m\n     \u001b[36mstacktrace:\u001b[0m\n       test/community_garden_test.exs:45: (test)\n","name":"test can get registration of a registered plot","output":"","status":"fail","task_id":5,"test_code":"assert {:ok, pid} = CommunityGarden.start()\nassert %Plot{} = plot = CommunityGarden.register(pid, \"Johnny Appleseed\")\nassert %Plot{} = registered_plot = CommunityGarden.get_registration(pid, plot.plot_id)\nassert registered_plot.plot_id == plot.plot_id\nassert registered_plot.registered_to == \"Johnny Appleseed\""},{"message":"  6) test return not_found when attempt to get registration of an unregistered plot (CommunityGardenTest)\n     \u001b[1m\u001b[30mtest/community_garden_test.exs:52\u001b[0m\n     \u001b[31mmatch (=) failed\u001b[0m\n     \u001b[36mcode:  \u001b[0massert {:not_found, \"plot is unregistered\"} = CommunityGarden.get_registration(pid, 1)\n     \u001b[36mleft:  \u001b[0m\u001b[31m{\n  :not_found,\n  \"plot is unregistered\"\n}\u001b[0m\n     \u001b[36mright: \u001b[0m\u001b[32mnil\u001b[0m\n     \u001b[36mstacktrace:\u001b[0m\n       test/community_garden_test.exs:59: (test)\n","name":"test return not_found when attempt to get registration of an unregistered plot","output":"","status":"fail","task_id":5,"test_code":"assert {:ok, pid} = CommunityGarden.start()\nassert {:not_found, \"plot is unregistered\"} = CommunityGarden.get_registration(pid, 1)"}],"version":3}
